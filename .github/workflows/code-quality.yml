name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 black isort bandit safety
        
    - name: Run Black formatter check
      run: |
        cd backend
        echo "🎨 Checking code formatting with Black..."
        black --check --diff apps/ config/ *.py
        
    - name: Run isort import sorting check
      run: |
        cd backend
        echo "📦 Checking import sorting with isort..."
        isort --check-only --diff apps/ config/ *.py
        
    - name: Run flake8 linting
      run: |
        cd backend
        echo "🔍 Running flake8 linting..."
        flake8 apps/ config/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run security checks with bandit
      run: |
        cd backend
        echo "🔒 Running security analysis with bandit..."
        bandit -r apps/ config/ -f json -o bandit-report.json || true
        bandit -r apps/ config/ -ll
        
    - name: Check dependencies for security vulnerabilities
      run: |
        cd backend
        echo "🛡️ Checking dependencies for security vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  django-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Set up environment
      run: |
        cd backend
        echo "SECRET_KEY=django-checks-secret-key" > .env
        echo "DEBUG=False" >> .env
        echo "DATABASE_URL=sqlite:///check.db" >> .env
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
        
    - name: Run Django system checks
      run: |
        cd backend
        echo "🔧 Running Django system checks..."
        python manage.py check
        
    - name: Run Django deployment checks
      run: |
        cd backend
        echo "🚀 Running Django deployment checks..."
        python manage.py check --deploy
        
    - name: Check for missing migrations
      run: |
        cd backend
        echo "📊 Checking for missing migrations..."
        python manage.py makemigrations --dry-run --check
        
    - name: Validate Django settings
      run: |
        cd backend
        echo "⚙️ Validating Django settings..."
        python -c "
        import os
        import django
        from django.conf import settings
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
        django.setup()
        print('✅ Django settings validation complete')
        print(f'✅ Installed apps: {len(settings.INSTALLED_APPS)}')
        print(f'✅ Middleware: {len(settings.MIDDLEWARE)}')
        "

  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        echo "🔍 Running ESLint..."
        npm run lint
        
    - name: Run TypeScript checks
      run: |
        cd frontend
        echo "📘 Running TypeScript checks..."
        npx tsc --noEmit
        
    - name: Check for security vulnerabilities
      run: |
        cd frontend
        echo "🛡️ Checking for security vulnerabilities..."
        npm audit --audit-level=high
        
    - name: Build frontend
      run: |
        cd frontend
        echo "🏗️ Building frontend..."
        npm run build
