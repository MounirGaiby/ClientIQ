# Generated by Django 4.2.7 on 2025-08-26 18:59

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contacts', '0002_company_created_by_company_updated_by_and_more'),
        ('users', '0002_alter_customuser_department_alter_customuser_email_and_more'),
        ('opportunities', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Activity type name (e.g., 'Call', 'Email', 'Meeting')", max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this activity type')),
                ('icon', models.CharField(blank=True, help_text='Icon name for UI display', max_length=50)),
                ('color', models.CharField(default='#6366f1', help_text='Hex color code for UI display', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this activity type is available for use')),
                ('requires_duration', models.BooleanField(default=False, help_text='Whether activities of this type require a duration')),
                ('requires_outcome', models.BooleanField(default=False, help_text='Whether activities of this type require an outcome')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Activity Type',
                'verbose_name_plural': 'Activity Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FollowUpRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of this follow-up rule', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of when this rule applies')),
                ('trigger_outcome', models.CharField(choices=[('successful', 'Successful'), ('unsuccessful', 'Unsuccessful'), ('no_answer', 'No Answer'), ('callback_requested', 'Callback Requested'), ('meeting_scheduled', 'Meeting Scheduled'), ('follow_up_needed', 'Follow-up Needed'), ('not_interested', 'Not Interested'), ('other', 'Other')], help_text='Activity outcome that triggers this rule', max_length=20)),
                ('follow_up_delay_days', models.PositiveIntegerField(default=1, help_text='Days to wait before follow-up')),
                ('follow_up_title_template', models.CharField(help_text='Template for follow-up activity title (use {original_title})', max_length=200)),
                ('follow_up_description_template', models.TextField(help_text='Template for follow-up description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('follow_up_activity_type', models.ForeignKey(help_text='Type of follow-up activity to create', on_delete=django.db.models.deletion.CASCADE, related_name='auto_follow_up_rules', to='activities.activitytype')),
                ('trigger_activity_type', models.ForeignKey(help_text='Activity type that triggers this rule', on_delete=django.db.models.deletion.CASCADE, related_name='follow_up_rules', to='activities.activitytype')),
            ],
            options={
                'verbose_name': 'Follow-up Rule',
                'verbose_name_plural': 'Follow-up Rules',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Activity title or subject', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the activity')),
                ('scheduled_at', models.DateTimeField(help_text='When this activity is scheduled to occur')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue')], default='scheduled', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When this activity was completed', null=True)),
                ('outcome', models.CharField(blank=True, choices=[('successful', 'Successful'), ('unsuccessful', 'Unsuccessful'), ('no_answer', 'No Answer'), ('callback_requested', 'Callback Requested'), ('meeting_scheduled', 'Meeting Scheduled'), ('follow_up_needed', 'Follow-up Needed'), ('not_interested', 'Not Interested'), ('other', 'Other')], help_text='Outcome of the activity', max_length=20)),
                ('outcome_notes', models.TextField(blank=True, help_text='Additional notes about the outcome')),
                ('reminder_minutes_before', models.PositiveIntegerField(blank=True, help_text='Minutes before activity to send reminder (null = no reminder)', null=True)),
                ('reminder_sent', models.BooleanField(default=False, help_text='Whether reminder has been sent')),
                ('requires_follow_up', models.BooleanField(default=False, help_text='Whether this activity requires a follow-up')),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='When to follow up on this activity', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_type', models.ForeignKey(help_text='Type of activity', on_delete=django.db.models.deletion.PROTECT, related_name='activities', to='activities.activitytype')),
                ('assigned_to', models.ForeignKey(help_text='User responsible for this activity', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_activities', to='users.customuser')),
                ('company', models.ForeignKey(blank=True, help_text='Related company', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='contacts.company')),
                ('contact', models.ForeignKey(blank=True, help_text='Related contact', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='contacts.contact')),
                ('created_by', models.ForeignKey(help_text='User who created this activity', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_activities', to='users.customuser')),
                ('opportunity', models.ForeignKey(blank=True, help_text='Related opportunity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='opportunities.opportunity')),
                ('parent_activity', models.ForeignKey(blank=True, help_text='Parent activity if this is a follow-up', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follow_up_activities', to='activities.activity')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['-scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Task title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Task description')),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='todo', max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('due_date', models.DateTimeField(blank=True, help_text='When this task is due', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When this task was completed', null=True)),
                ('completion_notes', models.TextField(blank=True, help_text='Notes about task completion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(help_text='User responsible for this task', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='users.customuser')),
                ('company', models.ForeignKey(blank=True, help_text='Related company', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='contacts.company')),
                ('contact', models.ForeignKey(blank=True, help_text='Related contact', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='contacts.contact')),
                ('created_by', models.ForeignKey(help_text='User who created this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tasks', to='users.customuser')),
                ('opportunity', models.ForeignKey(blank=True, help_text='Related opportunity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='opportunities.opportunity')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['assigned_to', 'status'], name='activities__assigne_9af899_idx'), models.Index(fields=['due_date'], name='activities__due_dat_a026a8_idx'), models.Index(fields=['priority', 'due_date'], name='activities__priorit_3eeee1_idx')],
            },
        ),
        migrations.CreateModel(
            name='InteractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Interaction title', max_length=200)),
                ('interaction_type', models.CharField(choices=[('call_inbound', 'Inbound Call'), ('call_outbound', 'Outbound Call'), ('email_sent', 'Email Sent'), ('email_received', 'Email Received'), ('meeting', 'Meeting'), ('note', 'Note'), ('sms', 'SMS'), ('other', 'Other')], help_text='Type of interaction', max_length=20)),
                ('notes', models.TextField(help_text='Detailed notes about the interaction')),
                ('interaction_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the interaction occurred')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration of interaction in minutes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, help_text='Related company', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='contacts.company')),
                ('contact', models.ForeignKey(blank=True, help_text='Related contact', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='contacts.contact')),
                ('logged_by', models.ForeignKey(help_text='User who logged this interaction', on_delete=django.db.models.deletion.CASCADE, related_name='logged_interactions', to='users.customuser')),
                ('opportunity', models.ForeignKey(blank=True, help_text='Related opportunity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='opportunities.opportunity')),
                ('source_activity', models.ForeignKey(blank=True, help_text='Activity that generated this interaction log', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interaction_logs', to='activities.activity')),
            ],
            options={
                'verbose_name': 'Interaction Log',
                'verbose_name_plural': 'Interaction Logs',
                'ordering': ['-interaction_date'],
                'indexes': [models.Index(fields=['contact', 'interaction_date'], name='activities__contact_4e74ff_idx'), models.Index(fields=['company', 'interaction_date'], name='activities__company_9172d8_idx'), models.Index(fields=['opportunity', 'interaction_date'], name='activities__opportu_b87db5_idx'), models.Index(fields=['logged_by', 'interaction_date'], name='activities__logged__8f154d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['scheduled_at'], name='activities__schedul_a1a29c_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['assigned_to', 'status'], name='activities__assigne_d0c8f0_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['contact'], name='activities__contact_9b9b6b_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['company'], name='activities__company_8b92d2_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['opportunity'], name='activities__opportu_1c2c9f_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['status', 'scheduled_at'], name='activities__status_1f13bb_idx'),
        ),
    ]
